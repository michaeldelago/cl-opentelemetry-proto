;;; opentelemetry/proto/resource/v1/resource.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.RESOURCE.V1")
    (cl:defpackage "CL-PROTOBUFS.OPENTELEMETRY.PROTO.RESOURCE.V1" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.RESOURCE.V1")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'resource
    :syntax :proto3

    :package "opentelemetry.proto.resource.v1"
    :import '("opentelemetry/proto/common/v1/common.proto"))
)


;;; Top-Level messages

(pi:define-message resource
    ()
  ;; Fields
  (attributes
   :index 1 :type cl-protobufs.opentelemetry.proto.common.v1::key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "attributes")
  (dropped-attributes-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedAttributesCount"))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:add-file-descriptor #P"opentelemetry/proto/resource/v1/resource.proto" 'resource)
)

(cl:export '(attributes
dropped-attributes-count
resource))
