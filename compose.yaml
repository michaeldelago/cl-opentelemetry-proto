services:
  # OpenTelemetry collector for development. Spins up an otel collector and grafana.
  grafana-otel-lgtm:
    ports:
      - "3000:3000"
      - "4318:4318"
    image: "docker.io/grafana/otel-lgtm"

  # OpenTelemetry collector for testing
  otel-collector:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command:
      [
        "--config=/etc/otelcol-config.yml",
        "--config=/etc/otelcol-config-extras.yml",
      ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "4318:4318"
configs:
  otelcol-config.yaml:
    content: |
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:4318
        httpcheck/frontend-proxy:
          targets:
            - endpoint: http://frontend-proxy:${env:ENVOY_PORT}
        docker_stats:
          endpoint: unix:///var/run/docker.sock
        redis:
          endpoint: "valkey-cart:6379"
          username: "valkey"
          collection_interval: 10s
        # Host metrics
        hostmetrics:
          root_path: /hostfs
          scrapers:
            cpu:
              metrics:
                system.cpu.utilization:
                  enabled: true
            disk:
            load:
            filesystem:
              exclude_mount_points:
                mount_points:
                  - /dev/*
                  - /proc/*
                  - /sys/*
                  - /run/k3s/containerd/*
                  - /var/lib/docker/*
                  - /var/lib/kubelet/*
                  - /snap/*
                match_type: regexp
              exclude_fs_types:
                fs_types:
                  - autofs
                  - binfmt_misc
                  - bpf
                  - cgroup2
                  - configfs
                  - debugfs
                  - devpts
                  - devtmpfs
                  - fusectl
                  - hugetlbfs
                  - iso9660
                  - mqueue
                  - nsfs
                  - overlay
                  - proc
                  - procfs
                  - pstore
                  - rpc_pipefs
                  - securityfs
                  - selinuxfs
                  - squashfs
                  - sysfs
                  - tracefs
                match_type: strict
            memory:
              metrics:
                system.memory.utilization:
                  enabled: true
            network:
            paging:
            processes:
            process:
              mute_process_exe_error: true
              mute_process_io_error: true
              mute_process_user_error: true

      exporters:
        debug:
        otlp:
          endpoint: "jaeger:4317"
          tls:
            insecure: true
        otlphttp/prometheus:
          endpoint: "http://prometheus:9090/api/v1/otlp"
          tls:
            insecure: true
        opensearch:
          logs_index: otel
          http:
            endpoint: "http://opensearch:9200"
            tls:
              insecure: true

      processors:
        batch:
        memory_limiter:
          check_interval: 5s
          limit_percentage: 80
          spike_limit_percentage: 25
        transform:
          error_mode: ignore
          trace_statements:
            - context: span
              statements:
                # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
                - replace_pattern(name, "\\?.*", "")
                - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

      connectors:
        spanmetrics:

      service:
        pipelines:
          traces:
            receivers: [otlp]
            processors: [memory_limiter, transform, batch]
            exporters: [otlp, debug, spanmetrics]
          metrics:
            receivers:
              [
                hostmetrics,
                docker_stats,
                httpcheck/frontend-proxy,
                otlp,
                redis,
                spanmetrics,
              ]
            processors: [memory_limiter, batch]
            exporters: [otlphttp/prometheus, debug]
          logs:
            receivers: [otlp]
            processors: [memory_limiter, batch]
            exporters: [opensearch, debug]
        telemetry:
          metrics:
            level: detailed
            readers:
              - periodic:
                  interval: 10000
                  timeout: 5000
                  exporter:
                    otlp:
                      protocol: grpc
                      endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_GRPC}
