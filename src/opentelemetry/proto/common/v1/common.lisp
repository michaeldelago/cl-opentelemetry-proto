;;; opentelemetry/proto/common/v1/common.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.COMMON.V1")
    (cl:defpackage "CL-PROTOBUFS.OPENTELEMETRY.PROTO.COMMON.V1" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.COMMON.V1")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'common
    :syntax :proto3

    :package "opentelemetry.proto.common.v1")
)


;;; Top-Level messages

(pi:define-message any-value
    ()
  ;; Fields
  (pi:define-oneof value ()
    (string-value
     :index 1 :type cl:string :kind :scalar :label (:optional) :field-presence :explicit :json-name "stringValue")
    (bool-value
     :index 2 :type cl:boolean :kind :scalar :label (:optional) :field-presence :explicit :json-name "boolValue")
    (int-value
     :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :field-presence :explicit :json-name "intValue")
    (double-value
     :index 4 :type cl:double-float :kind :scalar :label (:optional) :field-presence :explicit :json-name "doubleValue")
    (array-value
     :index 5 :type array-value :kind :message :label (:optional) :field-presence :explicit :json-name "arrayValue")
    (kvlist-value
     :index 6 :type key-value-list :kind :message :label (:optional) :field-presence :explicit :json-name "kvlistValue")
    (bytes-value
     :index 7 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :explicit :json-name "bytesValue")))

(pi:define-message array-value
    ()
  ;; Fields
  (values
   :index 1 :type any-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "values"))

(pi:define-message key-value-list
    ()
  ;; Fields
  (values
   :index 1 :type key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "values"))

(pi:define-message key-value
    ()
  ;; Fields
  (key
   :index 1 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "key")
  (value
   :index 2 :type any-value :kind :message :label (:optional) :field-presence :explicit :json-name "value"))

(pi:define-message instrumentation-scope
    ()
  ;; Fields
  (name
   :index 1 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "name")
  (version
   :index 2 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "version")
  (attributes
   :index 3 :type key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "attributes")
  (dropped-attributes-count
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedAttributesCount"))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:add-file-descriptor #P"opentelemetry/proto/common/v1/common.proto" 'common)
)

(cl:export '(any-value
array-value
attributes
bool-value
bytes-value
common
double-value
dropped-attributes-count
instrumentation-scope
int-value
key
key-value
key-value-list
kvlist-value
name
string-value
value
values
version))
