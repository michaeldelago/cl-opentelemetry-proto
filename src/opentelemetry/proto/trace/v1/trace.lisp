;;; opentelemetry/proto/trace/v1/trace.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.TRACE.V1")
    (cl:defpackage "CL-PROTOBUFS.OPENTELEMETRY.PROTO.TRACE.V1" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.OPENTELEMETRY.PROTO.TRACE.V1")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'trace
    :syntax :proto3

    :package "opentelemetry.proto.trace.v1"
    :import '("opentelemetry/proto/common/v1/common.proto"
    "opentelemetry/proto/resource/v1/resource.proto"))
)


;;; Top-Level enums

(pi:define-enum span-flags
    ()
  (:span-flags-do-not-use :index 0)
  (:span-flags-trace-flags-mask :index 255))

;;; Top-Level messages

(pi:define-message traces-data
    ()
  ;; Fields
  (resource-spans
   :index 1 :type resource-spans :kind :message :label (:repeated :list) :field-presence :implicit :json-name "resourceSpans"))

(pi:define-message resource-spans
    ()
  ;; Fields
  (resource
   :index 1 :type cl-protobufs.opentelemetry.proto.resource.v1::resource :kind :message :label (:optional) :field-presence :explicit :json-name "resource")
  (scope-spans
   :index 2 :type scope-spans :kind :message :label (:repeated :list) :field-presence :implicit :json-name "scopeSpans")
  (schema-url
   :index 3 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "schemaUrl"))

(pi:define-message scope-spans
    ()
  ;; Fields
  (scope
   :index 1 :type cl-protobufs.opentelemetry.proto.common.v1::instrumentation-scope :kind :message :label (:optional) :field-presence :explicit :json-name "scope")
  (spans
   :index 2 :type span :kind :message :label (:repeated :list) :field-presence :implicit :json-name "spans")
  (schema-url
   :index 3 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "schemaUrl"))

(pi:define-message span
    ()
  ;; Nested enums

  (pi:define-enum span.span-kind
      ()
    (:span-kind-unspecified :index 0)
    (:span-kind-internal :index 1)
    (:span-kind-server :index 2)
    (:span-kind-client :index 3)
    (:span-kind-producer :index 4)
    (:span-kind-consumer :index 5))
  ;; Nested messages

  (pi:define-message span.event
      ()
    ;; Fields
    (time-unix-nano
     :index 1 :type cl-protobufs:fixed64 :kind :scalar :label (:optional) :field-presence :implicit :json-name "timeUnixNano")
    (name
     :index 2 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "name")
    (attributes
     :index 3 :type cl-protobufs.opentelemetry.proto.common.v1::key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "attributes")
    (dropped-attributes-count
     :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedAttributesCount"))

  (pi:define-message span.link
      ()
    ;; Fields
    (trace-id
     :index 1 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :implicit :json-name "traceId")
    (span-id
     :index 2 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :implicit :json-name "spanId")
    (trace-state
     :index 3 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "traceState")
    (attributes
     :index 4 :type cl-protobufs.opentelemetry.proto.common.v1::key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "attributes")
    (dropped-attributes-count
     :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedAttributesCount")
    (flags
     :index 6 :type cl-protobufs:fixed32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "flags"))
  ;; Fields
  (trace-id
   :index 1 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :implicit :json-name "traceId")
  (span-id
   :index 2 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :implicit :json-name "spanId")
  (trace-state
   :index 3 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "traceState")
  (parent-span-id
   :index 4 :type cl-protobufs:byte-vector :kind :scalar :label (:optional) :field-presence :implicit :json-name "parentSpanId")
  (flags
   :index 16 :type cl-protobufs:fixed32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "flags")
  (name
   :index 5 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "name")
  (kind
   :index 6 :type span.span-kind :kind :enum :label (:optional) :field-presence :implicit :json-name "kind" :default :span-kind-unspecified)
  (start-time-unix-nano
   :index 7 :type cl-protobufs:fixed64 :kind :scalar :label (:optional) :field-presence :implicit :json-name "startTimeUnixNano")
  (end-time-unix-nano
   :index 8 :type cl-protobufs:fixed64 :kind :scalar :label (:optional) :field-presence :implicit :json-name "endTimeUnixNano")
  (attributes
   :index 9 :type cl-protobufs.opentelemetry.proto.common.v1::key-value :kind :message :label (:repeated :list) :field-presence :implicit :json-name "attributes")
  (dropped-attributes-count
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedAttributesCount")
  (events
   :index 11 :type span.event :kind :message :label (:repeated :list) :field-presence :implicit :json-name "events")
  (dropped-events-count
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedEventsCount")
  (links
   :index 13 :type span.link :kind :message :label (:repeated :list) :field-presence :implicit :json-name "links")
  (dropped-links-count
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :field-presence :implicit :json-name "droppedLinksCount")
  (status
   :index 15 :type status :kind :message :label (:optional) :field-presence :explicit :json-name "status"))

(pi:define-message status
    ()
  ;; Nested enums

  (pi:define-enum status.status-code
      ()
    (:status-code-unset :index 0)
    (:status-code-ok :index 1)
    (:status-code-error :index 2))
  ;; Fields
  (message
   :index 2 :type cl:string :kind :scalar :label (:optional) :field-presence :implicit :json-name "message")
  (code
   :index 3 :type status.status-code :kind :enum :label (:optional) :field-presence :implicit :json-name "code" :default :status-code-unset))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:add-file-descriptor #P"opentelemetry/proto/trace/v1/trace.proto" 'trace)
)

(cl:export '(attributes
code
dropped-attributes-count
dropped-events-count
dropped-links-count
end-time-unix-nano
events
flags
kind
links
message
name
parent-span-id
resource
resource-spans
schema-url
scope
scope-spans
span
span-flags
span-flags-int-to-keyword
span-flags-keyword-to-int
span-id
span.event
span.link
span.span-kind
span.span-kind-int-to-keyword
span.span-kind-keyword-to-int
spans
start-time-unix-nano
status
status.status-code
status.status-code-int-to-keyword
status.status-code-keyword-to-int
time-unix-nano
trace
trace-id
trace-state
traces-data))
